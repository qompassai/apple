add ul_basename() and use it in rename

https://github.com/util-linux/util-linux/issues/3071
https://github.com/util-linux/util-linux/commit/0bb52bae9132daffc8c918b40fa31d08680b356e
https://github.com/util-linux/util-linux/commit/503007991b8212203954c4febae7ad7f245d97c6
--- Makefile.in
+++ Makefile.in
@@ -2754,8 +2754,8 @@
 am__rename_SOURCES_DIST = misc-utils/rename.c
 @BUILD_RENAME_TRUE@am_rename_OBJECTS = misc-utils/rename.$(OBJEXT)
 rename_OBJECTS = $(am_rename_OBJECTS)
-rename_LDADD = $(LDADD)
-rename_DEPENDENCIES = $(am__DEPENDENCIES_1)
+@BUILD_RENAME_TRUE@rename_DEPENDENCIES = $(am__DEPENDENCIES_3) \
+@BUILD_RENAME_TRUE@	libcommon.la
 am__renice_SOURCES_DIST = sys-utils/renice.c
 @BUILD_RENICE_TRUE@am_renice_OBJECTS = sys-utils/renice.$(OBJEXT)
 renice_OBJECTS = $(am_renice_OBJECTS)
@@ -7024,6 +7024,7 @@
 @BUILD_KILL_TRUE@kill_SOURCES = misc-utils/kill.c
 @BUILD_KILL_TRUE@kill_LDADD = $(LDADD) libcommon.la
 @BUILD_RENAME_TRUE@rename_SOURCES = misc-utils/rename.c
+@BUILD_RENAME_TRUE@rename_LDADD = $(LDADD) libcommon.la
 @BUILD_GETOPT_TRUE@getopt_SOURCES = misc-utils/getopt.c
 @BUILD_GETOPT_TRUE@getopt_LDADD = $(LDADD) libcommon.la
 @BUILD_GETOPT_TRUE@getoptexampledir = $(docdir)
--- include/fileutils.h
+++ include/fileutils.h
@@ -114,5 +114,6 @@
 
 
 extern int ul_reopen(int fd, int flags);
+extern char *ul_basename(char *path);
 
 #endif /* UTIL_LINUX_FILEUTILS */
--- lib/fileutils.c
+++ lib/fileutils.c
@@ -311,3 +311,35 @@
 
 	return open(buf, flags);
 }
+
+
+/* This is a libc-independent version of basename(), which is necessary to
+ * maintain functionality across different libc implementations. It was
+ * inspired by the behavior and implementation of glibc.
+ */
+char *ul_basename(char *path)
+{
+	char *p;
+
+	if (!path || !*path)
+		return (char *) ".";	/* ugly, static string */
+
+	p = strrchr(path, '/');
+	if (!p)
+		return path;		/* no '/', return original */
+
+	if (*(p + 1) != '\0')
+		return p + 1;		/* begin of the name */
+
+	while (p > path && *(p - 1) == '/')
+		--p;			/* remove tailing '/' */
+
+	if (p > path) {
+		*p-- = '\0';
+		while (p > path && *(p - 1) != '/')
+			--p;		/* move to the beginning of the name */
+	} else while (*(p + 1) != '\0')
+		++p;
+
+	return p;
+}
--- meson.build
+++ meson.build
@@ -2994,6 +2994,7 @@
   'rename',
   rename_sources,
   include_directories : includes,
+  link_with : [lib_common],
   install_dir : usrbin_exec_dir,
   install : opt,
   build_by_default : opt)
--- misc-utils/rename.c
+++ misc-utils/rename.c
@@ -28,7 +28,6 @@
 #include <errno.h>
 #include <getopt.h>
 #include <fcntl.h>
-#include <libgen.h>
 #include <unistd.h>
 #include <termios.h>
 #include <sys/types.h>
@@ -40,6 +39,7 @@
 #include "closestream.h"
 #include "optutils.h"
 #include "rpmatch.h"
+#include "fileutils.h"
 
 #define RENAME_EXIT_SOMEOK	2
 #define RENAME_EXIT_NOTHING	4
@@ -59,7 +59,7 @@
 		/* We only want to search in the final path component. Don't
 		   include the final '/' in that component; if `from` is empty,
 		   we want it to first match after the '/', not before. */
-		search_start = basename(orig);
+		search_start = ul_basename(orig);
 	}
 
 	return strstr(search_start, from);
